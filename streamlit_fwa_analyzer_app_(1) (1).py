# -*- coding: utf-8 -*-
"""streamlit_fwa_analyzer_app (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cYOmE5ntA6i9WhU0X0-nyAj0FT9AgxA7
"""

import streamlit as st
import boto3
import os
import uuid
from PyPDF2 import PdfReader # Ensure PyPDF2 is installed: pip install PyPDF2
import time # Added for simulating AI response delay

# --- Configuration ---
# IMPORTANT: DO NOT hardcode AWS credentials here.
# Use environment variables or AWS CLI configuration.
# For Streamlit Cloud, use Streamlit Secrets.
# Example environment variables:
# os.environ["AWS_ACCESS_KEY_ID"] = "AWS_ACCESS_KEY_ID"
# os.environ["AWS_SECRET_ACCESS_KEY"] = "AWS_SECRET_ACCESS_KEY"
# os.environ["AWS_REGION"] = "ap-south-1"

# Default values for Bedrock Agent
DEFAULT_AWS_REGION = os.getenv('AWS_REGION', 'ap-south-1')
DEFAULT_AGENT_ID = '5GILSDVVQO'
DEFAULT_AGENT_ALIAS_ID = 'TSTALIASID'

# --- Helper Functions ---

def extract_text_from_pdf(uploaded_file):
    """
    Extracts text from an uploaded PDF file.
    Args:
        uploaded_file: A file-like object from st.file_uploader.
    Returns:
        str: Extracted text, or empty string if an error occurs.
    """
    text = ""
    try:
        # PyPDF2.PdfReader expects a file-like object
        reader = PdfReader(uploaded_file)
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
        return text.strip()
    except Exception as e:
        st.error(f"Error reading PDF: {e}")
        return ""

def query_bedrock_agent(text, agent_id, agent_alias_id, aws_region, is_chat_query=False): # Added is_chat_query parameter
    """
    Sends text to a Bedrock Agent and retrieves the response.
    Args:
        text (str): The input text for the agent.
        agent_id (str): The ID of the Bedrock Agent.
        agent_alias_id (str): The alias ID of the Bedrock Agent.
        aws_region (str): The AWS region where the agent is deployed.
        is_chat_query (bool): True if this is a chat query, modifies input text prefix.
    Returns:
        str: The agent's response, or None if an error occurs.
    """
    try:
        client = boto3.client('bedrock-agent-runtime', region_name=aws_region)
        session_id = str(uuid.uuid4())  # Unique session ID for each invocation

        # Modify input text based on whether it's a chat query or PDF analysis
        if is_chat_query:
            input_text_for_agent = text
            st.info(f"Invoking Bedrock Agent for chat (ID: {agent_id}, Alias: {agent_alias_id}) in region: {aws_region}...")
        else:
            input_text_for_agent = "Please analyze the following medical claim for potential Fraud, Waste, and Abuse:\n\n" + text
            st.info(f"Invoking Bedrock Agent for FWA analysis (ID: {agent_id}, Alias: {agent_alias_id}) in region: {aws_region}...")


        response = client.invoke_agent(
            agentId=agent_id,
            agentAliasId=agent_alias_id,
            sessionId=session_id,
            inputText=input_text_for_agent
        )

        # Read streaming response
        completion = ""
        for event in response['completion']:
            chunk = event.get('chunk')
            if chunk and 'bytes' in chunk:
                completion += chunk['bytes'].decode('utf-8')

        return completion

    except Exception as e:
        st.error(f"Error invoking Bedrock agent: {e}")
        st.warning("Please ensure your AWS credentials are correctly configured and the Bedrock Agent is in 'AVAILABLE' status.")
        return None

# --- Streamlit UI ---
st.set_page_config(page_title="IntegrityIQ", layout="centered")

st.title("üè• IntegrityIQ")

st.markdown("""
This application helps analyze medical claims for potential Fraud, Waste, and Abuse using an AWS Bedrock Agent.
Upload a PDF medical claim document, and the agent will provide an analysis.
""")

st.warning("""
**Important:** Ensure your AWS Bedrock Agent (ID: `5GILSDVVQO`, Alias: `TSTALIASID`) is in the `AVAILABLE` status in the AWS Console before running the analysis. If it's `PREPARED`, you need to publish it first.
""")

# Optional: Allow users to override agent details (for advanced use)
with st.expander("Advanced Configuration (Optional)"):
    agent_id_input = st.text_input("Bedrock Agent ID", value=DEFAULT_AGENT_ID, key="advanced_agent_id")
    agent_alias_id_input = st.text_input("Bedrock Agent Alias ID", value=DEFAULT_AGENT_ALIAS_ID, key="advanced_alias_id")
    aws_region_input = st.text_input("AWS Region", value=DEFAULT_AWS_REGION, key="advanced_region")

uploaded_file = st.file_uploader("Upload a Medical Claim PDF", type="pdf")

if uploaded_file is not None:
    st.success(f"PDF uploaded: {uploaded_file.name}")

    if st.button("Analyze Claim"):
        if uploaded_file is None:
            st.error("Please upload a PDF file first.")
        else:
            with st.spinner("Extracting text from PDF..."):
                pdf_text = extract_text_from_pdf(uploaded_file)

            if pdf_text:
                st.subheader("Extracted Text (for review):")
                st.text_area("PDF Content", pdf_text, height=300, disabled=True)

                with st.spinner("Sending text to Bedrock Agent for analysis..."):
                    agent_response = query_bedrock_agent(
                        pdf_text,
                        agent_id_input,
                        agent_alias_id_input,
                        aws_region_input,
                        is_chat_query=False # This is a PDF analysis query
                    )

                if agent_response:
                    st.subheader("üß† Bedrock Agent Response:")
                    st.success("Analysis Complete!")
                    st.write(agent_response)
                else:
                    st.error("Failed to get a response from the Bedrock Agent. Check the console for errors and ensure the agent is 'AVAILABLE'.")
            else:
                st.error("Could not extract text from the PDF. Please ensure it's a readable PDF.")
else:
    st.info("Upload a PDF file to begin the FWA analysis.")

st.markdown("---") # Separator
st.subheader("üí¨ Ask Your FWA Assistant a Question")

# Initialize chat history for the interactive Q&A section
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []

# Display chat messages from history
for message in st.session_state.chat_messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Chat input for user questions
if prompt := st.chat_input("Ask a question about FWA detection, models, or anything related..."):
    # Add user message to chat history
    st.session_state.chat_messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Get assistant response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            # Use the same Bedrock Agent for general Q&A
            # The 'is_chat_query=True' parameter tells the agent that this is a direct question
            # You might want to adjust your Bedrock Agent's instructions/knowledge base
            # to handle general Q&A in addition to PDF analysis.
            assistant_response = query_bedrock_agent(
                prompt,
                agent_id_input,
                agent_alias_id_input,
                aws_region_input,
                is_chat_query=True # This is a chat query
            )

            if assistant_response:
                st.markdown(assistant_response)
                st.session_state.chat_messages.append({"role": "assistant", "content": assistant_response})
            else:
                st.error("Failed to get a response from the FWA assistant. Please try again.")
                st.session_state.chat_messages.append({"role": "assistant", "content": "Sorry, I couldn't process that question right now."})

# Optional: Add a clear chat button
if st.button("Clear Chat", key="clear_chat_button"):
    st.session_state.chat_messages = []
    st.rerun()